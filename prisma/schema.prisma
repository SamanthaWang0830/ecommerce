// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model Store{
  id String @id @default(uuid())
  name String
  userId String
  billboard Billboard?
  categories Category[] @relation("StoreToCategory")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard{
  id String @id @default(uuid())
  storeId String @unique
  store Store @relation(fields: [storeId], references: [id])
  label String
  imageUrl String
  categories Category[] 
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}


model Category{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId], references: [id])
  products Product[] @relation("CategoryToProduct")
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  name String
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name String
  price Decimal
  isFeatured Boolean

  // if every stock become 0, then isArchived is true
  stockOfSmallSize Int
  stockOfMediumSize Int
  stockOfLargeSize Int
  isArchived Boolean @default(false)

  images Image[] @relation("ProductToImage")
  orderItems OrderItem[]
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([storeId])
  @@index([categoryId])

}

model Image{
  id String @id @default(uuid())
  productId String
  product Product @relation("ProductToImage", fields: [productId], references: [id], onDelete:Cascade) //不删除image也可以直接删除product
  url String
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem{
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])

  size String
  num Int

  @@index([orderId])
  @@index([productId])
}
